// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: eventlistener/definitions.proto

package eventlistener

import (
	context "context"
	shared "github.com/radekg/keycloak-protobuf-spi/gospi/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event_EventType int32

const (
	Event_LOGIN                                  Event_EventType = 0
	Event_LOGIN_ERROR                            Event_EventType = 1
	Event_REGISTER                               Event_EventType = 2
	Event_REGISTER_ERROR                         Event_EventType = 3
	Event_LOGOUT                                 Event_EventType = 4
	Event_LOGOUT_ERROR                           Event_EventType = 5
	Event_CODE_TO_TOKEN                          Event_EventType = 6
	Event_CODE_TO_TOKEN_ERROR                    Event_EventType = 7
	Event_CLIENT_LOGIN                           Event_EventType = 8
	Event_CLIENT_LOGIN_ERROR                     Event_EventType = 9
	Event_REFRESH_TOKEN                          Event_EventType = 10
	Event_REFRESH_TOKEN_ERROR                    Event_EventType = 11
	Event_VALIDATE_ACCESS_TOKEN                  Event_EventType = 12 //* @deprecated
	Event_VALIDATE_ACCESS_TOKEN_ERROR            Event_EventType = 13 //* @deprecated
	Event_INTROSPECT_TOKEN                       Event_EventType = 14
	Event_INTROSPECT_TOKEN_ERROR                 Event_EventType = 15
	Event_FEDERATED_IDENTITY_LINK                Event_EventType = 16
	Event_FEDERATED_IDENTITY_LINK_ERROR          Event_EventType = 17
	Event_REMOVE_FEDERATED_IDENTITY              Event_EventType = 18
	Event_REMOVE_FEDERATED_IDENTITY_ERROR        Event_EventType = 19
	Event_UPDATE_EMAIL                           Event_EventType = 20
	Event_UPDATE_EMAIL_ERROR                     Event_EventType = 21
	Event_UPDATE_PROFILE                         Event_EventType = 22
	Event_UPDATE_PROFILE_ERROR                   Event_EventType = 23
	Event_UPDATE_PASSWORD                        Event_EventType = 24
	Event_UPDATE_PASSWORD_ERROR                  Event_EventType = 25
	Event_UPDATE_TOTP                            Event_EventType = 26
	Event_UPDATE_TOTP_ERROR                      Event_EventType = 27
	Event_VERIFY_EMAIL                           Event_EventType = 28
	Event_VERIFY_EMAIL_ERROR                     Event_EventType = 29
	Event_VERIFY_PROFILE                         Event_EventType = 90 // new in 14.0.0
	Event_VERIFY_PROFILE_ERROR                   Event_EventType = 91 // new in 14.0.0
	Event_REMOVE_TOTP                            Event_EventType = 30
	Event_REMOVE_TOTP_ERROR                      Event_EventType = 31
	Event_GRANT_CONSENT                          Event_EventType = 32
	Event_GRANT_CONSENT_ERROR                    Event_EventType = 33
	Event_UPDATE_CONSENT                         Event_EventType = 34
	Event_UPDATE_CONSENT_ERROR                   Event_EventType = 35
	Event_REVOKE_GRANT                           Event_EventType = 36
	Event_REVOKE_GRANT_ERROR                     Event_EventType = 37
	Event_SEND_VERIFY_EMAIL                      Event_EventType = 38
	Event_SEND_VERIFY_EMAIL_ERROR                Event_EventType = 39
	Event_SEND_RESET_PASSWORD                    Event_EventType = 40
	Event_SEND_RESET_PASSWORD_ERROR              Event_EventType = 41
	Event_SEND_IDENTITY_PROVIDER_LINK            Event_EventType = 42
	Event_SEND_IDENTITY_PROVIDER_LINK_ERROR      Event_EventType = 43
	Event_RESET_PASSWORD                         Event_EventType = 44
	Event_RESET_PASSWORD_ERROR                   Event_EventType = 45
	Event_RESTART_AUTHENTICATION                 Event_EventType = 46
	Event_RESTART_AUTHENTICATION_ERROR           Event_EventType = 47
	Event_INVALID_SIGNATURE                      Event_EventType = 48
	Event_INVALID_SIGNATURE_ERROR                Event_EventType = 49
	Event_REGISTER_NODE                          Event_EventType = 50
	Event_REGISTER_NODE_ERROR                    Event_EventType = 51
	Event_UNREGISTER_NODE                        Event_EventType = 52
	Event_UNREGISTER_NODE_ERROR                  Event_EventType = 53
	Event_USER_INFO_REQUEST                      Event_EventType = 54
	Event_USER_INFO_REQUEST_ERROR                Event_EventType = 55
	Event_IDENTITY_PROVIDER_LINK_ACCOUNT         Event_EventType = 56
	Event_IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR   Event_EventType = 57
	Event_IDENTITY_PROVIDER_LOGIN                Event_EventType = 58
	Event_IDENTITY_PROVIDER_LOGIN_ERROR          Event_EventType = 59
	Event_IDENTITY_PROVIDER_FIRST_LOGIN          Event_EventType = 60
	Event_IDENTITY_PROVIDER_FIRST_LOGIN_ERROR    Event_EventType = 61
	Event_IDENTITY_PROVIDER_POST_LOGIN           Event_EventType = 62
	Event_IDENTITY_PROVIDER_POST_LOGIN_ERROR     Event_EventType = 63
	Event_IDENTITY_PROVIDER_RESPONSE             Event_EventType = 64
	Event_IDENTITY_PROVIDER_RESPONSE_ERROR       Event_EventType = 65
	Event_IDENTITY_PROVIDER_RETRIEVE_TOKEN       Event_EventType = 66
	Event_IDENTITY_PROVIDER_RETRIEVE_TOKEN_ERROR Event_EventType = 67
	Event_IMPERSONATE                            Event_EventType = 68
	Event_IMPERSONATE_ERROR                      Event_EventType = 69
	Event_CUSTOM_REQUIRED_ACTION                 Event_EventType = 70
	Event_CUSTOM_REQUIRED_ACTION_ERROR           Event_EventType = 71
	Event_EXECUTE_ACTIONS                        Event_EventType = 72
	Event_EXECUTE_ACTIONS_ERROR                  Event_EventType = 73
	Event_EXECUTE_ACTION_TOKEN                   Event_EventType = 74
	Event_EXECUTE_ACTION_TOKEN_ERROR             Event_EventType = 75
	Event_CLIENT_INFO                            Event_EventType = 76
	Event_CLIENT_INFO_ERROR                      Event_EventType = 77
	Event_CLIENT_REGISTER                        Event_EventType = 78
	Event_CLIENT_REGISTER_ERROR                  Event_EventType = 79
	Event_CLIENT_UPDATE                          Event_EventType = 80
	Event_CLIENT_UPDATE_ERROR                    Event_EventType = 81
	Event_CLIENT_DELETE                          Event_EventType = 82
	Event_CLIENT_DELETE_ERROR                    Event_EventType = 83
	Event_CLIENT_INITIATED_ACCOUNT_LINKING       Event_EventType = 84
	Event_CLIENT_INITIATED_ACCOUNT_LINKING_ERROR Event_EventType = 85
	Event_TOKEN_EXCHANGE                         Event_EventType = 86
	Event_TOKEN_EXCHANGE_ERROR                   Event_EventType = 87
	Event_OAUTH2_DEVICE_AUTH                     Event_EventType = 92 // new in 13.0.0
	Event_OAUTH2_DEVICE_AUTH_ERROR               Event_EventType = 93 // new in 13.0.0
	Event_OAUTH2_DEVICE_VERIFY_USER_CODE         Event_EventType = 94 // new in 13.0.0
	Event_OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR   Event_EventType = 95 // new in 13.0.0
	Event_OAUTH2_DEVICE_CODE_TO_TOKEN            Event_EventType = 96 // new in 13.0.0
	Event_OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR      Event_EventType = 97 // new in 13.0.0
	Event_AUTHREQID_TO_TOKEN                     Event_EventType = 98 // new in 13.0.0
	Event_AUTHREQID_TO_TOKEN_ERROR               Event_EventType = 99 // new in 13.0.0
	Event_PERMISSION_TOKEN                       Event_EventType = 88
	Event_PERMISSION_TOKEN_ERROR                 Event_EventType = 89
	Event_DELETE_ACCOUNT                         Event_EventType = 100
	Event_DELETE_ACCOUNT_ERROR                   Event_EventType = 101
	Event_PUSHED_AUTHORIZATION_REQUEST           Event_EventType = 102 // new in 15.0.0
	Event_PUSHED_AUTHORIZATION_REQUEST_ERROR     Event_EventType = 103 // new in 15.0.0
	Event_UNKNOWN                                Event_EventType = 1000
)

// Enum value maps for Event_EventType.
var (
	Event_EventType_name = map[int32]string{
		0:    "LOGIN",
		1:    "LOGIN_ERROR",
		2:    "REGISTER",
		3:    "REGISTER_ERROR",
		4:    "LOGOUT",
		5:    "LOGOUT_ERROR",
		6:    "CODE_TO_TOKEN",
		7:    "CODE_TO_TOKEN_ERROR",
		8:    "CLIENT_LOGIN",
		9:    "CLIENT_LOGIN_ERROR",
		10:   "REFRESH_TOKEN",
		11:   "REFRESH_TOKEN_ERROR",
		12:   "VALIDATE_ACCESS_TOKEN",
		13:   "VALIDATE_ACCESS_TOKEN_ERROR",
		14:   "INTROSPECT_TOKEN",
		15:   "INTROSPECT_TOKEN_ERROR",
		16:   "FEDERATED_IDENTITY_LINK",
		17:   "FEDERATED_IDENTITY_LINK_ERROR",
		18:   "REMOVE_FEDERATED_IDENTITY",
		19:   "REMOVE_FEDERATED_IDENTITY_ERROR",
		20:   "UPDATE_EMAIL",
		21:   "UPDATE_EMAIL_ERROR",
		22:   "UPDATE_PROFILE",
		23:   "UPDATE_PROFILE_ERROR",
		24:   "UPDATE_PASSWORD",
		25:   "UPDATE_PASSWORD_ERROR",
		26:   "UPDATE_TOTP",
		27:   "UPDATE_TOTP_ERROR",
		28:   "VERIFY_EMAIL",
		29:   "VERIFY_EMAIL_ERROR",
		90:   "VERIFY_PROFILE",
		91:   "VERIFY_PROFILE_ERROR",
		30:   "REMOVE_TOTP",
		31:   "REMOVE_TOTP_ERROR",
		32:   "GRANT_CONSENT",
		33:   "GRANT_CONSENT_ERROR",
		34:   "UPDATE_CONSENT",
		35:   "UPDATE_CONSENT_ERROR",
		36:   "REVOKE_GRANT",
		37:   "REVOKE_GRANT_ERROR",
		38:   "SEND_VERIFY_EMAIL",
		39:   "SEND_VERIFY_EMAIL_ERROR",
		40:   "SEND_RESET_PASSWORD",
		41:   "SEND_RESET_PASSWORD_ERROR",
		42:   "SEND_IDENTITY_PROVIDER_LINK",
		43:   "SEND_IDENTITY_PROVIDER_LINK_ERROR",
		44:   "RESET_PASSWORD",
		45:   "RESET_PASSWORD_ERROR",
		46:   "RESTART_AUTHENTICATION",
		47:   "RESTART_AUTHENTICATION_ERROR",
		48:   "INVALID_SIGNATURE",
		49:   "INVALID_SIGNATURE_ERROR",
		50:   "REGISTER_NODE",
		51:   "REGISTER_NODE_ERROR",
		52:   "UNREGISTER_NODE",
		53:   "UNREGISTER_NODE_ERROR",
		54:   "USER_INFO_REQUEST",
		55:   "USER_INFO_REQUEST_ERROR",
		56:   "IDENTITY_PROVIDER_LINK_ACCOUNT",
		57:   "IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR",
		58:   "IDENTITY_PROVIDER_LOGIN",
		59:   "IDENTITY_PROVIDER_LOGIN_ERROR",
		60:   "IDENTITY_PROVIDER_FIRST_LOGIN",
		61:   "IDENTITY_PROVIDER_FIRST_LOGIN_ERROR",
		62:   "IDENTITY_PROVIDER_POST_LOGIN",
		63:   "IDENTITY_PROVIDER_POST_LOGIN_ERROR",
		64:   "IDENTITY_PROVIDER_RESPONSE",
		65:   "IDENTITY_PROVIDER_RESPONSE_ERROR",
		66:   "IDENTITY_PROVIDER_RETRIEVE_TOKEN",
		67:   "IDENTITY_PROVIDER_RETRIEVE_TOKEN_ERROR",
		68:   "IMPERSONATE",
		69:   "IMPERSONATE_ERROR",
		70:   "CUSTOM_REQUIRED_ACTION",
		71:   "CUSTOM_REQUIRED_ACTION_ERROR",
		72:   "EXECUTE_ACTIONS",
		73:   "EXECUTE_ACTIONS_ERROR",
		74:   "EXECUTE_ACTION_TOKEN",
		75:   "EXECUTE_ACTION_TOKEN_ERROR",
		76:   "CLIENT_INFO",
		77:   "CLIENT_INFO_ERROR",
		78:   "CLIENT_REGISTER",
		79:   "CLIENT_REGISTER_ERROR",
		80:   "CLIENT_UPDATE",
		81:   "CLIENT_UPDATE_ERROR",
		82:   "CLIENT_DELETE",
		83:   "CLIENT_DELETE_ERROR",
		84:   "CLIENT_INITIATED_ACCOUNT_LINKING",
		85:   "CLIENT_INITIATED_ACCOUNT_LINKING_ERROR",
		86:   "TOKEN_EXCHANGE",
		87:   "TOKEN_EXCHANGE_ERROR",
		92:   "OAUTH2_DEVICE_AUTH",
		93:   "OAUTH2_DEVICE_AUTH_ERROR",
		94:   "OAUTH2_DEVICE_VERIFY_USER_CODE",
		95:   "OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR",
		96:   "OAUTH2_DEVICE_CODE_TO_TOKEN",
		97:   "OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR",
		98:   "AUTHREQID_TO_TOKEN",
		99:   "AUTHREQID_TO_TOKEN_ERROR",
		88:   "PERMISSION_TOKEN",
		89:   "PERMISSION_TOKEN_ERROR",
		100:  "DELETE_ACCOUNT",
		101:  "DELETE_ACCOUNT_ERROR",
		102:  "PUSHED_AUTHORIZATION_REQUEST",
		103:  "PUSHED_AUTHORIZATION_REQUEST_ERROR",
		1000: "UNKNOWN",
	}
	Event_EventType_value = map[string]int32{
		"LOGIN":                                  0,
		"LOGIN_ERROR":                            1,
		"REGISTER":                               2,
		"REGISTER_ERROR":                         3,
		"LOGOUT":                                 4,
		"LOGOUT_ERROR":                           5,
		"CODE_TO_TOKEN":                          6,
		"CODE_TO_TOKEN_ERROR":                    7,
		"CLIENT_LOGIN":                           8,
		"CLIENT_LOGIN_ERROR":                     9,
		"REFRESH_TOKEN":                          10,
		"REFRESH_TOKEN_ERROR":                    11,
		"VALIDATE_ACCESS_TOKEN":                  12,
		"VALIDATE_ACCESS_TOKEN_ERROR":            13,
		"INTROSPECT_TOKEN":                       14,
		"INTROSPECT_TOKEN_ERROR":                 15,
		"FEDERATED_IDENTITY_LINK":                16,
		"FEDERATED_IDENTITY_LINK_ERROR":          17,
		"REMOVE_FEDERATED_IDENTITY":              18,
		"REMOVE_FEDERATED_IDENTITY_ERROR":        19,
		"UPDATE_EMAIL":                           20,
		"UPDATE_EMAIL_ERROR":                     21,
		"UPDATE_PROFILE":                         22,
		"UPDATE_PROFILE_ERROR":                   23,
		"UPDATE_PASSWORD":                        24,
		"UPDATE_PASSWORD_ERROR":                  25,
		"UPDATE_TOTP":                            26,
		"UPDATE_TOTP_ERROR":                      27,
		"VERIFY_EMAIL":                           28,
		"VERIFY_EMAIL_ERROR":                     29,
		"VERIFY_PROFILE":                         90,
		"VERIFY_PROFILE_ERROR":                   91,
		"REMOVE_TOTP":                            30,
		"REMOVE_TOTP_ERROR":                      31,
		"GRANT_CONSENT":                          32,
		"GRANT_CONSENT_ERROR":                    33,
		"UPDATE_CONSENT":                         34,
		"UPDATE_CONSENT_ERROR":                   35,
		"REVOKE_GRANT":                           36,
		"REVOKE_GRANT_ERROR":                     37,
		"SEND_VERIFY_EMAIL":                      38,
		"SEND_VERIFY_EMAIL_ERROR":                39,
		"SEND_RESET_PASSWORD":                    40,
		"SEND_RESET_PASSWORD_ERROR":              41,
		"SEND_IDENTITY_PROVIDER_LINK":            42,
		"SEND_IDENTITY_PROVIDER_LINK_ERROR":      43,
		"RESET_PASSWORD":                         44,
		"RESET_PASSWORD_ERROR":                   45,
		"RESTART_AUTHENTICATION":                 46,
		"RESTART_AUTHENTICATION_ERROR":           47,
		"INVALID_SIGNATURE":                      48,
		"INVALID_SIGNATURE_ERROR":                49,
		"REGISTER_NODE":                          50,
		"REGISTER_NODE_ERROR":                    51,
		"UNREGISTER_NODE":                        52,
		"UNREGISTER_NODE_ERROR":                  53,
		"USER_INFO_REQUEST":                      54,
		"USER_INFO_REQUEST_ERROR":                55,
		"IDENTITY_PROVIDER_LINK_ACCOUNT":         56,
		"IDENTITY_PROVIDER_LINK_ACCOUNT_ERROR":   57,
		"IDENTITY_PROVIDER_LOGIN":                58,
		"IDENTITY_PROVIDER_LOGIN_ERROR":          59,
		"IDENTITY_PROVIDER_FIRST_LOGIN":          60,
		"IDENTITY_PROVIDER_FIRST_LOGIN_ERROR":    61,
		"IDENTITY_PROVIDER_POST_LOGIN":           62,
		"IDENTITY_PROVIDER_POST_LOGIN_ERROR":     63,
		"IDENTITY_PROVIDER_RESPONSE":             64,
		"IDENTITY_PROVIDER_RESPONSE_ERROR":       65,
		"IDENTITY_PROVIDER_RETRIEVE_TOKEN":       66,
		"IDENTITY_PROVIDER_RETRIEVE_TOKEN_ERROR": 67,
		"IMPERSONATE":                            68,
		"IMPERSONATE_ERROR":                      69,
		"CUSTOM_REQUIRED_ACTION":                 70,
		"CUSTOM_REQUIRED_ACTION_ERROR":           71,
		"EXECUTE_ACTIONS":                        72,
		"EXECUTE_ACTIONS_ERROR":                  73,
		"EXECUTE_ACTION_TOKEN":                   74,
		"EXECUTE_ACTION_TOKEN_ERROR":             75,
		"CLIENT_INFO":                            76,
		"CLIENT_INFO_ERROR":                      77,
		"CLIENT_REGISTER":                        78,
		"CLIENT_REGISTER_ERROR":                  79,
		"CLIENT_UPDATE":                          80,
		"CLIENT_UPDATE_ERROR":                    81,
		"CLIENT_DELETE":                          82,
		"CLIENT_DELETE_ERROR":                    83,
		"CLIENT_INITIATED_ACCOUNT_LINKING":       84,
		"CLIENT_INITIATED_ACCOUNT_LINKING_ERROR": 85,
		"TOKEN_EXCHANGE":                         86,
		"TOKEN_EXCHANGE_ERROR":                   87,
		"OAUTH2_DEVICE_AUTH":                     92,
		"OAUTH2_DEVICE_AUTH_ERROR":               93,
		"OAUTH2_DEVICE_VERIFY_USER_CODE":         94,
		"OAUTH2_DEVICE_VERIFY_USER_CODE_ERROR":   95,
		"OAUTH2_DEVICE_CODE_TO_TOKEN":            96,
		"OAUTH2_DEVICE_CODE_TO_TOKEN_ERROR":      97,
		"AUTHREQID_TO_TOKEN":                     98,
		"AUTHREQID_TO_TOKEN_ERROR":               99,
		"PERMISSION_TOKEN":                       88,
		"PERMISSION_TOKEN_ERROR":                 89,
		"DELETE_ACCOUNT":                         100,
		"DELETE_ACCOUNT_ERROR":                   101,
		"PUSHED_AUTHORIZATION_REQUEST":           102,
		"PUSHED_AUTHORIZATION_REQUEST_ERROR":     103,
		"UNKNOWN":                                1000,
	}
)

func (x Event_EventType) Enum() *Event_EventType {
	p := new(Event_EventType)
	*p = x
	return p
}

func (x Event_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_eventlistener_definitions_proto_enumTypes[0].Descriptor()
}

func (Event_EventType) Type() protoreflect.EnumType {
	return &file_eventlistener_definitions_proto_enumTypes[0]
}

func (x Event_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_EventType.Descriptor instead.
func (Event_EventType) EnumDescriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{0, 0}
}

type AdminEvent_OperationType int32

const (
	AdminEvent_CREATE  AdminEvent_OperationType = 0
	AdminEvent_UPDATE  AdminEvent_OperationType = 1
	AdminEvent_DELETE  AdminEvent_OperationType = 2
	AdminEvent_ACTION  AdminEvent_OperationType = 3
	AdminEvent_UNKNOWN AdminEvent_OperationType = 1000
)

// Enum value maps for AdminEvent_OperationType.
var (
	AdminEvent_OperationType_name = map[int32]string{
		0:    "CREATE",
		1:    "UPDATE",
		2:    "DELETE",
		3:    "ACTION",
		1000: "UNKNOWN",
	}
	AdminEvent_OperationType_value = map[string]int32{
		"CREATE":  0,
		"UPDATE":  1,
		"DELETE":  2,
		"ACTION":  3,
		"UNKNOWN": 1000,
	}
)

func (x AdminEvent_OperationType) Enum() *AdminEvent_OperationType {
	p := new(AdminEvent_OperationType)
	*p = x
	return p
}

func (x AdminEvent_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminEvent_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_eventlistener_definitions_proto_enumTypes[1].Descriptor()
}

func (AdminEvent_OperationType) Type() protoreflect.EnumType {
	return &file_eventlistener_definitions_proto_enumTypes[1]
}

func (x AdminEvent_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminEvent_OperationType.Descriptor instead.
func (AdminEvent_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{3, 0}
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Type      Event_EventType        `protobuf:"varint,2,opt,name=type,proto3,enum=gospi.eventlistener.Event_EventType" json:"type,omitempty"`
	RealmId   *shared.NullableString `protobuf:"bytes,3,opt,name=realmId,proto3" json:"realmId,omitempty"`
	ClientId  *shared.NullableString `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
	UserId    *shared.NullableString `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	SessionId *shared.NullableString `protobuf:"bytes,6,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	IpAddress *shared.NullableString `protobuf:"bytes,7,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	Error     *shared.NullableString `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	Details   map[string]string      `protobuf:"bytes,9,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventlistener_definitions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_eventlistener_definitions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Event) GetType() Event_EventType {
	if x != nil {
		return x.Type
	}
	return Event_LOGIN
}

func (x *Event) GetRealmId() *shared.NullableString {
	if x != nil {
		return x.RealmId
	}
	return nil
}

func (x *Event) GetClientId() *shared.NullableString {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *Event) GetUserId() *shared.NullableString {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *Event) GetSessionId() *shared.NullableString {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *Event) GetIpAddress() *shared.NullableString {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *Event) GetError() *shared.NullableString {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Event) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventlistener_definitions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventlistener_definitions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{1}
}

func (x *EventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type AuthDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealmId   *shared.NullableString `protobuf:"bytes,1,opt,name=realmId,proto3" json:"realmId,omitempty"`
	ClientId  *shared.NullableString `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	UserId    *shared.NullableString `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	IpAddress *shared.NullableString `protobuf:"bytes,4,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
}

func (x *AuthDetails) Reset() {
	*x = AuthDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventlistener_definitions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthDetails) ProtoMessage() {}

func (x *AuthDetails) ProtoReflect() protoreflect.Message {
	mi := &file_eventlistener_definitions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthDetails.ProtoReflect.Descriptor instead.
func (*AuthDetails) Descriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{2}
}

func (x *AuthDetails) GetRealmId() *shared.NullableString {
	if x != nil {
		return x.RealmId
	}
	return nil
}

func (x *AuthDetails) GetClientId() *shared.NullableString {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *AuthDetails) GetUserId() *shared.NullableString {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *AuthDetails) GetIpAddress() *shared.NullableString {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

type AdminEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64                    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	RealmId        *shared.NullableString   `protobuf:"bytes,2,opt,name=realmId,proto3" json:"realmId,omitempty"`
	AuthDetails    *AuthDetails             `protobuf:"bytes,3,opt,name=authDetails,proto3" json:"authDetails,omitempty"`
	ResourceType   *shared.NullableString   `protobuf:"bytes,4,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	OperationType  AdminEvent_OperationType `protobuf:"varint,5,opt,name=operationType,proto3,enum=gospi.eventlistener.AdminEvent_OperationType" json:"operationType,omitempty"`
	ResourcePath   *shared.NullableString   `protobuf:"bytes,6,opt,name=resourcePath,proto3" json:"resourcePath,omitempty"`
	Representation *shared.NullableString   `protobuf:"bytes,7,opt,name=representation,proto3" json:"representation,omitempty"`
	Error          *shared.NullableString   `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AdminEvent) Reset() {
	*x = AdminEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventlistener_definitions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEvent) ProtoMessage() {}

func (x *AdminEvent) ProtoReflect() protoreflect.Message {
	mi := &file_eventlistener_definitions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEvent.ProtoReflect.Descriptor instead.
func (*AdminEvent) Descriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{3}
}

func (x *AdminEvent) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AdminEvent) GetRealmId() *shared.NullableString {
	if x != nil {
		return x.RealmId
	}
	return nil
}

func (x *AdminEvent) GetAuthDetails() *AuthDetails {
	if x != nil {
		return x.AuthDetails
	}
	return nil
}

func (x *AdminEvent) GetResourceType() *shared.NullableString {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *AdminEvent) GetOperationType() AdminEvent_OperationType {
	if x != nil {
		return x.OperationType
	}
	return AdminEvent_CREATE
}

func (x *AdminEvent) GetResourcePath() *shared.NullableString {
	if x != nil {
		return x.ResourcePath
	}
	return nil
}

func (x *AdminEvent) GetRepresentation() *shared.NullableString {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *AdminEvent) GetError() *shared.NullableString {
	if x != nil {
		return x.Error
	}
	return nil
}

type AdminEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminEvent *AdminEvent `protobuf:"bytes,1,opt,name=adminEvent,proto3" json:"adminEvent,omitempty"`
	Flag       bool        `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *AdminEventRequest) Reset() {
	*x = AdminEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eventlistener_definitions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEventRequest) ProtoMessage() {}

func (x *AdminEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eventlistener_definitions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEventRequest.ProtoReflect.Descriptor instead.
func (*AdminEventRequest) Descriptor() ([]byte, []int) {
	return file_eventlistener_definitions_proto_rawDescGZIP(), []int{4}
}

func (x *AdminEventRequest) GetAdminEvent() *AdminEvent {
	if x != nil {
		return x.AdminEvent
	}
	return nil
}

func (x *AdminEventRequest) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

var File_eventlistener_definitions_proto protoreflect.FileDescriptor

var file_eventlistener_definitions_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x1a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x1a, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73,
	0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x15, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x1f, 0x0a,
	0x1b, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x53, 0x50, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x10, 0x12, 0x21, 0x0a,
	0x1d, 0x46, 0x45, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11,
	0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x44, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x12, 0x12,
	0x23, 0x0a, 0x1f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x46, 0x45, 0x44, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10,
	0x18, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x50, 0x10, 0x1a, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x50, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x1d, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x5a, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x5b, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x50, 0x10, 0x1e, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x50, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x21,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x23, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0x24,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4e, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x4e, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x26, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x2a, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x2c,
	0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f,
	0x52, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2d, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x30, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x31, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x32, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x34, 0x12, 0x19, 0x0a,
	0x15, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x35, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x36, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x37, 0x12, 0x22, 0x0a, 0x1e,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x38,
	0x12, 0x28, 0x0a, 0x24, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x39, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x3a, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x3b, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x3c, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x3d, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x3e, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x3f,
	0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x40,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x41, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x54, 0x52,
	0x49, 0x45, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x42, 0x12, 0x2a, 0x0a, 0x26,
	0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x43, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x50, 0x45,
	0x52, 0x53, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x44, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x45,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x46, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x47, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x48, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x49, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x4a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x4b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x4c, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x4d,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x4e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x4f,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x50, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x51, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x52, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x53, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x54, 0x12, 0x2a,
	0x0a, 0x26, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x49,
	0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x55, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x56, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x57, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x41, 0x55, 0x54,
	0x48, 0x32, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x5c,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x5d, 0x12, 0x22,
	0x0a, 0x1e, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x5e, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x5f, 0x12, 0x1f, 0x0a, 0x1b,
	0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x60, 0x12, 0x25, 0x0a,
	0x21, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x61, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x48, 0x52, 0x45, 0x51, 0x49,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x62, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x55, 0x54, 0x48, 0x52, 0x45, 0x51, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x63, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x58,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x59, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x64,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x55,
	0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x66, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x55, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x67, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0xe8, 0x07, 0x22, 0x40, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbe, 0x04, 0x0a, 0x0a, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4d, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe8, 0x07, 0x22, 0x68, 0x0a, 0x11, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66,
	0x6c, 0x61, 0x67, 0x32, 0xa6, 0x01, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0c,
	0x4f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x67,
	0x6f, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x4f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x68, 0x0a, 0x29,
	0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x73, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x64, 0x65, 0x6b, 0x67, 0x2f, 0x6b, 0x65, 0x79,
	0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2d, 0x73,
	0x70, 0x69, 0x2f, 0x67, 0x6f, 0x73, 0x70, 0x69, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eventlistener_definitions_proto_rawDescOnce sync.Once
	file_eventlistener_definitions_proto_rawDescData = file_eventlistener_definitions_proto_rawDesc
)

func file_eventlistener_definitions_proto_rawDescGZIP() []byte {
	file_eventlistener_definitions_proto_rawDescOnce.Do(func() {
		file_eventlistener_definitions_proto_rawDescData = protoimpl.X.CompressGZIP(file_eventlistener_definitions_proto_rawDescData)
	})
	return file_eventlistener_definitions_proto_rawDescData
}

var file_eventlistener_definitions_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_eventlistener_definitions_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_eventlistener_definitions_proto_goTypes = []interface{}{
	(Event_EventType)(0),          // 0: gospi.eventlistener.Event.EventType
	(AdminEvent_OperationType)(0), // 1: gospi.eventlistener.AdminEvent.OperationType
	(*Event)(nil),                 // 2: gospi.eventlistener.Event
	(*EventRequest)(nil),          // 3: gospi.eventlistener.EventRequest
	(*AuthDetails)(nil),           // 4: gospi.eventlistener.AuthDetails
	(*AdminEvent)(nil),            // 5: gospi.eventlistener.AdminEvent
	(*AdminEventRequest)(nil),     // 6: gospi.eventlistener.AdminEventRequest
	nil,                           // 7: gospi.eventlistener.Event.DetailsEntry
	(*shared.NullableString)(nil), // 8: gospi.shared.NullableString
	(*shared.Empty)(nil),          // 9: gospi.shared.Empty
}
var file_eventlistener_definitions_proto_depIdxs = []int32{
	0,  // 0: gospi.eventlistener.Event.type:type_name -> gospi.eventlistener.Event.EventType
	8,  // 1: gospi.eventlistener.Event.realmId:type_name -> gospi.shared.NullableString
	8,  // 2: gospi.eventlistener.Event.clientId:type_name -> gospi.shared.NullableString
	8,  // 3: gospi.eventlistener.Event.userId:type_name -> gospi.shared.NullableString
	8,  // 4: gospi.eventlistener.Event.sessionId:type_name -> gospi.shared.NullableString
	8,  // 5: gospi.eventlistener.Event.ipAddress:type_name -> gospi.shared.NullableString
	8,  // 6: gospi.eventlistener.Event.error:type_name -> gospi.shared.NullableString
	7,  // 7: gospi.eventlistener.Event.details:type_name -> gospi.eventlistener.Event.DetailsEntry
	2,  // 8: gospi.eventlistener.EventRequest.event:type_name -> gospi.eventlistener.Event
	8,  // 9: gospi.eventlistener.AuthDetails.realmId:type_name -> gospi.shared.NullableString
	8,  // 10: gospi.eventlistener.AuthDetails.clientId:type_name -> gospi.shared.NullableString
	8,  // 11: gospi.eventlistener.AuthDetails.userId:type_name -> gospi.shared.NullableString
	8,  // 12: gospi.eventlistener.AuthDetails.ipAddress:type_name -> gospi.shared.NullableString
	8,  // 13: gospi.eventlistener.AdminEvent.realmId:type_name -> gospi.shared.NullableString
	4,  // 14: gospi.eventlistener.AdminEvent.authDetails:type_name -> gospi.eventlistener.AuthDetails
	8,  // 15: gospi.eventlistener.AdminEvent.resourceType:type_name -> gospi.shared.NullableString
	1,  // 16: gospi.eventlistener.AdminEvent.operationType:type_name -> gospi.eventlistener.AdminEvent.OperationType
	8,  // 17: gospi.eventlistener.AdminEvent.resourcePath:type_name -> gospi.shared.NullableString
	8,  // 18: gospi.eventlistener.AdminEvent.representation:type_name -> gospi.shared.NullableString
	8,  // 19: gospi.eventlistener.AdminEvent.error:type_name -> gospi.shared.NullableString
	5,  // 20: gospi.eventlistener.AdminEventRequest.adminEvent:type_name -> gospi.eventlistener.AdminEvent
	6,  // 21: gospi.eventlistener.KeycloakEventService.OnAdminEvent:input_type -> gospi.eventlistener.AdminEventRequest
	3,  // 22: gospi.eventlistener.KeycloakEventService.OnEvent:input_type -> gospi.eventlistener.EventRequest
	9,  // 23: gospi.eventlistener.KeycloakEventService.OnAdminEvent:output_type -> gospi.shared.Empty
	9,  // 24: gospi.eventlistener.KeycloakEventService.OnEvent:output_type -> gospi.shared.Empty
	23, // [23:25] is the sub-list for method output_type
	21, // [21:23] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_eventlistener_definitions_proto_init() }
func file_eventlistener_definitions_proto_init() {
	if File_eventlistener_definitions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eventlistener_definitions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventlistener_definitions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventlistener_definitions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventlistener_definitions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eventlistener_definitions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eventlistener_definitions_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eventlistener_definitions_proto_goTypes,
		DependencyIndexes: file_eventlistener_definitions_proto_depIdxs,
		EnumInfos:         file_eventlistener_definitions_proto_enumTypes,
		MessageInfos:      file_eventlistener_definitions_proto_msgTypes,
	}.Build()
	File_eventlistener_definitions_proto = out.File
	file_eventlistener_definitions_proto_rawDesc = nil
	file_eventlistener_definitions_proto_goTypes = nil
	file_eventlistener_definitions_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeycloakEventServiceClient is the client API for KeycloakEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeycloakEventServiceClient interface {
	OnAdminEvent(ctx context.Context, in *AdminEventRequest, opts ...grpc.CallOption) (*shared.Empty, error)
	OnEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*shared.Empty, error)
}

type keycloakEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeycloakEventServiceClient(cc grpc.ClientConnInterface) KeycloakEventServiceClient {
	return &keycloakEventServiceClient{cc}
}

func (c *keycloakEventServiceClient) OnAdminEvent(ctx context.Context, in *AdminEventRequest, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/gospi.eventlistener.KeycloakEventService/OnAdminEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keycloakEventServiceClient) OnEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*shared.Empty, error) {
	out := new(shared.Empty)
	err := c.cc.Invoke(ctx, "/gospi.eventlistener.KeycloakEventService/OnEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeycloakEventServiceServer is the server API for KeycloakEventService service.
type KeycloakEventServiceServer interface {
	OnAdminEvent(context.Context, *AdminEventRequest) (*shared.Empty, error)
	OnEvent(context.Context, *EventRequest) (*shared.Empty, error)
}

// UnimplementedKeycloakEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeycloakEventServiceServer struct {
}

func (*UnimplementedKeycloakEventServiceServer) OnAdminEvent(context.Context, *AdminEventRequest) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAdminEvent not implemented")
}
func (*UnimplementedKeycloakEventServiceServer) OnEvent(context.Context, *EventRequest) (*shared.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}

func RegisterKeycloakEventServiceServer(s *grpc.Server, srv KeycloakEventServiceServer) {
	s.RegisterService(&_KeycloakEventService_serviceDesc, srv)
}

func _KeycloakEventService_OnAdminEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakEventServiceServer).OnAdminEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gospi.eventlistener.KeycloakEventService/OnAdminEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakEventServiceServer).OnAdminEvent(ctx, req.(*AdminEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeycloakEventService_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeycloakEventServiceServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gospi.eventlistener.KeycloakEventService/OnEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeycloakEventServiceServer).OnEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeycloakEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gospi.eventlistener.KeycloakEventService",
	HandlerType: (*KeycloakEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnAdminEvent",
			Handler:    _KeycloakEventService_OnAdminEvent_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _KeycloakEventService_OnEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventlistener/definitions.proto",
}
